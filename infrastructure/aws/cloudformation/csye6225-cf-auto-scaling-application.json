{
  "Description": "Auto-Scaling Stack",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcId": {
      "Description": "Vpc Id",
      "Type": "String"
    },
    "myAccountId": {
      "Type": "String"
    },
    "s3domain": {
      "Type": "String",
      "Default": "csye6225-fall2018-bhidesu.me.tld.csye6225.com"
    },
    "senderEmail": {
      "Type": "String",
      "Default": "noreply@csye6225-fall2018-nirmalj.me"
    },
    "dynamoDB": {
      "Type": "String",
      "Default": "myDB"
    },
    "SSLArn": {
      "Type": "String",
      "Default": "csye6225-fall2018-nirmalj.me"
    },
    "DBSubnetGroupName": {
      "Type": "String"
    },
    "DBInstanceIdentifier": {
      "Type": "String"
    },
    "HostedZoneName": {
      "Type": "String"
    },
    "appname": {
      "Description": "Application Name",
      "Type": "String"
    },
    "depname": {
      "Description": "Deployment Group Name",
      "Type": "String"
    },
    "hostedZoneId": {
      "Description": "Hosted Zone Id",
      "Type": "String"
    }
  },
  "Resources": {
    "MyDNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "Type": "TXT",
        "TTL": "60",
        "ResourceRecords": [
          "\"csye-6225-fall2018\""
        ]
      }
    },
    "ResourceRecords": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "hostedZoneId"
        },
        "Name": {
          "Ref": "HostedZoneName"
        },
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": [
              "MyLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          },
          "DNSName": {
            "Fn::GetAtt": [
              "MyLoadBalancer",
              "DNSName"
            ]
          }
        },
        "Type": "A"
      }
    },
    "DBsubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "RDS DB subnet group",
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroupName"
        },
        "SubnetIds": [
          "subnet-03a71ba12b3a2b48f",
          "subnet-00c8cffe8c092d7da",
          "subnet-03e9a859fc9cf1c6f"
        ]
      }
    },
    "csye6225RDSSG": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId": {
          "Ref": "VpcId"
        },
        "DBSecurityGroupIngress": [
          {
            "EC2SecurityGroupId": {
              "Ref": "csye6225Webapp"
            }
          }
        ],
        "GroupDescription": "test"
      }
    },
    "csye6225Webapp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22 80 and 443",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "RDS": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "10",
        "Engine": "MySQL",
        "DBInstanceClass": "db.t2.medium",
        "MultiAZ": "false",
        "DBInstanceIdentifier": "csye6225-fall2018-1",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "PubliclyAccessible": "false",
        "DBName": "csye6225",
        "DBSubnetGroupName": {
          "Ref": "DBsubnetGroup"
        },
        "DBSecurityGroups": [
          {
            "Ref": "csye6225RDSSG"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": {
          "Ref": "s3domain"
        }
      }
    },
    "Dynamodb": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "myDB",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    },
    "ASGLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": "ami-9887c6e7",
        "InstanceType": "t2.micro",
        "AssociatePublicIpAddress": true,
        "KeyName": "MyEC2",
        "SecurityGroups": [
          {
            "Ref": "csye6225Webapp"
          }
        ],
        "IamInstanceProfile": "EC2ToS3BucketInstanceProfile",
        "LaunchConfigurationName": "asg_launch_config",
        "InstanceMonitoring": "false",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "20",
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \n",
                "sudo yum check-update\n",
                "sudo sudo yum install java-1.8.0-openjdk -y\n",
                "sudo yum install ruby -y \n",
                "sudo yum install php php-mysql php-devel php-gd php-pecl-memcache php-pspell php-snmp php-xmlrpc php-xml -y \n",
                "sudo yum install wget -y \n",
                "sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm -y \n",
                "sudo wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm \n",
                "sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm \n",
                "sudo yum install mysql-server -y \n",
                "sudo systemctl start mysqld \n",
                "sudo yum update  -y\n",
                "sudo yum install collectd -y \n",
                "sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm \n",
                "sudo sudo rpm -U ./amazon-cloudwatch-agent.rpm \n",
                "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:WebApp -s \n",
                "sudo yum install -y python36u python36u-libs python36u-devel python36u-pip -y \n",
                "sudo yum install nodejs -y \n",
                "sudo yum install gcc gcc-c++ make -y \n",
                "sudo npm install pm2 -g \n",
                "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                "sudo chmod +x ./install \n",
                "sudo ./install auto \n",
                "sudo service codedeploy-agent start \n",
                "sudo service codedeploy-agent status \n",
                "sudo echo NODE_ENV=development > /var/.env \n",
                "sudo echo DB_USER=csye6225master >> /var/.env \n",
                "sudo echo DB_PASS=csye6225password >> /var/.env \n",
                "sudo echo DB_PORT=3306 >> /var/.env \n",
                "sudo echo DB_NAME=csye6225 >> /var/.env \n",
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo echo EMAIL_SOURCE=",
                      {
                        "Ref": "senderEmail"
                      },
                      " >> /var/.env \n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo echo DDB_TABLE=",
                      {
                        "Ref": "dynamoDB"
                      },
                      " >> /var/.env \n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo echo DB_HOST=",
                      {
                        "Fn::GetAtt": [
                          "RDS",
                          "Endpoint.Address"
                        ]
                      },
                      " >> /var/.env \n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo echo BUCKET=",
                      {
                        "Ref": "s3domain"
                      },
                      " >> /var/.env \n"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "MyAutoScale",
        "Cooldown": "60",
        "DesiredCapacity": "3",
        "VPCZoneIdentifier": [
          "subnet-0e4f21d9842a3706e",
          "subnet-0e233edcbb284fd79",
          "subnet-067cc256763927411"
        ],
        "LaunchConfigurationName": {
          "Ref": "ASGLaunchConfig"
        },
        "TargetGroupARNs": [
          {
            "Ref": "myTargetGroup"
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupMinSize",
              "GroupMaxSize"
            ]
          }
        ],
        "MinSize": "3",
        "MaxSize": "10",
        "Tags": [
          {
            "Key": "NAME",
            "Value": "CSYE6225",
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "DependsOn": "Listener"
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "10",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "8",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "MyLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "MyALB",
        "Scheme": "internet-facing",
        "Subnets": [
          "subnet-0e4f21d9842a3706e",
          "subnet-0e233edcbb284fd79",
          "subnet-067cc256763927411"
        ],
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4",
        "Tags": [
          {
            "Key": "NAME",
            "Value": "CSYE6225"
          }
        ]
      }
    },
    "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "SSLArn"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "myTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "MyLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "myTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 40,
        "HealthCheckTimeoutSeconds": 30,
        "Protocol": "HTTP",
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "3000",
        "Port": "3000",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        },
        "Tags": [
          {
            "Key": "NAME",
            "Value": "CSYE6225"
          }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "ALB_SG",
        "GroupDescription": "Enable SSH access via port 22 80 and 443",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "DestinationSecurityGroupId": {
              "Ref": "csye6225Webapp"
            }
          }
        ],
        "Tags": [
          {
            "Key": "CSTY6225LB-SG",
            "Value": "new-stack-1-ec2"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": "csye6225CodeDeployApplication",
        "DeploymentGroupName": {
          "Ref": "depname"
        },
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "LoadBalancerInfo": {
          "ElbInfoList": [
            {
              "Name": "MyALB"
            }
          ]
        },
        "Ec2TagFilters": [
          {
            "Key": "NAME",
            "Value": "CSYE6225",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "AutoScalingGroups": [
          {
            "Ref": "WebServerGroup"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "RoleName": "CodeDeployServiceRole"
      }
    }
  },
  "Outputs": {
    "CodeDeployServiceRoleArn": {
      "Description": "Code Deploy Arn",
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployServiceRole",
          "Arn"
        ]
      }
    }
  }
}
